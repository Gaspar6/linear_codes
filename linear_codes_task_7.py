import random

from scipy.spatial.distance import hamming

def minimize_hamming_distance(B, C, v):

    # finding m
    current_min = float('inf')
    for w in C:
        dist = hamming(v,w)
        if dist < current_min:
            current_min = dist
    m = current_min

    # finding L
    L = []
    for w in C:
        if hamming(w, v) == m:
            L.append(w)

    # finding w
    w = L[random.randint(0, len(L)-1)]
    print("w:")
    print(w)
    # finding r
    Z_k = [ i for i in range(7)]
    r = (0,0,0)

    for a in Z_k:
        for b in Z_k:
            for c in Z_k:

                vector = []
                for i in range(len(B[0])):
                    vector.append( a * B[0][i] + b * B[1][i] + c * B[2][i])
                for i in range(len(vector)):
                    vector[i] = vector[i] % 7


                if vector == w:
                    return (a, b, c)




if __name__ == '__main__':
    print("Kodowanie")


    B = [[1, 0, 0, 2, 4], [0, 1, 0, 1, 0], [0, 0, 1, 5, 6]]
    C = [[0, 0, 0, 0, 0], [0, 0, 1, 5, 6], [0, 0, 2, 3, 5], [0, 0, 3, 1, 4], [0, 0, 4, 6, 3], [0, 0, 5, 4, 2], [0, 0, 6, 2, 1], [0, 1, 0, 1, 0], [0, 1, 1, 6, 6], [0, 1, 2, 4, 5], [0, 1, 3, 2, 4], [0, 1, 4, 0, 3], [0, 1, 5, 5, 2], [0, 1, 6, 3, 1], [0, 2, 0, 2, 0], [0, 2, 1, 0, 6], [0, 2, 2, 5, 5], [0, 2, 3, 3, 4], [0, 2, 4, 1, 3], [0, 2, 5, 6, 2], [0, 2, 6, 4, 1], [0, 3, 0, 3, 0], [0, 3, 1, 1, 6], [0, 3, 2, 6, 5], [0, 3, 3, 4, 4], [0, 3, 4, 2, 3], [0, 3, 5, 0, 2], [0, 3, 6, 5, 1], [0, 4, 0, 4, 0], [0, 4, 1, 2, 6], [0, 4, 2, 0, 5], [0, 4, 3, 5, 4], [0, 4, 4, 3, 3], [0, 4, 5, 1, 2], [0, 4, 6, 6, 1], [0, 5, 0, 5, 0], [0, 5, 1, 3, 6], [0, 5, 2, 1, 5], [0, 5, 3, 6, 4], [0, 5, 4, 4, 3], [0, 5, 5, 2, 2], [0, 5, 6, 0, 1], [0, 6, 0, 6, 0], [0, 6, 1, 4, 6], [0, 6, 2, 2, 5], [0, 6, 3, 0, 4], [0, 6, 4, 5, 3], [0, 6, 5, 3, 2], [0, 6, 6, 1, 1], [1, 0, 0, 2, 4], [1, 0, 1, 0, 3], [1, 0, 2, 5, 2], [1, 0, 3, 3, 1], [1, 0, 4, 1, 0], [1, 0, 5, 6, 6], [1, 0, 6, 4, 5], [1, 1, 0, 3, 4], [1, 1, 1, 1, 3], [1, 1, 2, 6, 2], [1, 1, 3, 4, 1], [1, 1, 4, 2, 0], [1, 1, 5, 0, 6], [1, 1, 6, 5, 5], [1, 2, 0, 4, 4], [1, 2, 1, 2, 3], [1, 2, 2, 0, 2], [1, 2, 3, 5, 1], [1, 2, 4, 3, 0], [1, 2, 5, 1, 6], [1, 2, 6, 6, 5], [1, 3, 0, 5, 4], [1, 3, 1, 3, 3], [1, 3, 2, 1, 2], [1, 3, 3, 6, 1], [1, 3, 4, 4, 0], [1, 3, 5, 2, 6], [1, 3, 6, 0, 5], [1, 4, 0, 6, 4], [1, 4, 1, 4, 3], [1, 4, 2, 2, 2], [1, 4, 3, 0, 1], [1, 4, 4, 5, 0], [1, 4, 5, 3, 6], [1, 4, 6, 1, 5], [1, 5, 0, 0, 4], [1, 5, 1, 5, 3], [1, 5, 2, 3, 2], [1, 5, 3, 1, 1], [1, 5, 4, 6, 0], [1, 5, 5, 4, 6], [1, 5, 6, 2, 5], [1, 6, 0, 1, 4], [1, 6, 1, 6, 3], [1, 6, 2, 4, 2], [1, 6, 3, 2, 1], [1, 6, 4, 0, 0], [1, 6, 5, 5, 6], [1, 6, 6, 3, 5], [2, 0, 0, 4, 1], [2, 0, 1, 2, 0], [2, 0, 2, 0, 6], [2, 0, 3, 5, 5], [2, 0, 4, 3, 4], [2, 0, 5, 1, 3], [2, 0, 6, 6, 2], [2, 1, 0, 5, 1], [2, 1, 1, 3, 0], [2, 1, 2, 1, 6], [2, 1, 3, 6, 5], [2, 1, 4, 4, 4], [2, 1, 5, 2, 3], [2, 1, 6, 0, 2], [2, 2, 0, 6, 1], [2, 2, 1, 4, 0], [2, 2, 2, 2, 6], [2, 2, 3, 0, 5], [2, 2, 4, 5, 4], [2, 2, 5, 3, 3], [2, 2, 6, 1, 2], [2, 3, 0, 0, 1], [2, 3, 1, 5, 0], [2, 3, 2, 3, 6], [2, 3, 3, 1, 5], [2, 3, 4, 6, 4], [2, 3, 5, 4, 3], [2, 3, 6, 2, 2], [2, 4, 0, 1, 1], [2, 4, 1, 6, 0], [2, 4, 2, 4, 6], [2, 4, 3, 2, 5], [2, 4, 4, 0, 4], [2, 4, 5, 5, 3], [2, 4, 6, 3, 2], [2, 5, 0, 2, 1], [2, 5, 1, 0, 0], [2, 5, 2, 5, 6], [2, 5, 3, 3, 5], [2, 5, 4, 1, 4], [2, 5, 5, 6, 3], [2, 5, 6, 4, 2], [2, 6, 0, 3, 1], [2, 6, 1, 1, 0], [2, 6, 2, 6, 6], [2, 6, 3, 4, 5], [2, 6, 4, 2, 4], [2, 6, 5, 0, 3], [2, 6, 6, 5, 2], [3, 0, 0, 6, 5], [3, 0, 1, 4, 4], [3, 0, 2, 2, 3], [3, 0, 3, 0, 2], [3, 0, 4, 5, 1], [3, 0, 5, 3, 0], [3, 0, 6, 1, 6], [3, 1, 0, 0, 5], [3, 1, 1, 5, 4], [3, 1, 2, 3, 3], [3, 1, 3, 1, 2], [3, 1, 4, 6, 1], [3, 1, 5, 4, 0], [3, 1, 6, 2, 6], [3, 2, 0, 1, 5], [3, 2, 1, 6, 4], [3, 2, 2, 4, 3], [3, 2, 3, 2, 2], [3, 2, 4, 0, 1], [3, 2, 5, 5, 0], [3, 2, 6, 3, 6], [3, 3, 0, 2, 5], [3, 3, 1, 0, 4], [3, 3, 2, 5, 3], [3, 3, 3, 3, 2], [3, 3, 4, 1, 1], [3, 3, 5, 6, 0], [3, 3, 6, 4, 6], [3, 4, 0, 3, 5], [3, 4, 1, 1, 4], [3, 4, 2, 6, 3], [3, 4, 3, 4, 2], [3, 4, 4, 2, 1], [3, 4, 5, 0, 0], [3, 4, 6, 5, 6], [3, 5, 0, 4, 5], [3, 5, 1, 2, 4], [3, 5, 2, 0, 3], [3, 5, 3, 5, 2], [3, 5, 4, 3, 1], [3, 5, 5, 1, 0], [3, 5, 6, 6, 6], [3, 6, 0, 5, 5], [3, 6, 1, 3, 4], [3, 6, 2, 1, 3], [3, 6, 3, 6, 2], [3, 6, 4, 4, 1], [3, 6, 5, 2, 0], [3, 6, 6, 0, 6], [4, 0, 0, 1, 2], [4, 0, 1, 6, 1], [4, 0, 2, 4, 0], [4, 0, 3, 2, 6], [4, 0, 4, 0, 5], [4, 0, 5, 5, 4], [4, 0, 6, 3, 3], [4, 1, 0, 2, 2], [4, 1, 1, 0, 1], [4, 1, 2, 5, 0], [4, 1, 3, 3, 6], [4, 1, 4, 1, 5], [4, 1, 5, 6, 4], [4, 1, 6, 4, 3], [4, 2, 0, 3, 2], [4, 2, 1, 1, 1], [4, 2, 2, 6, 0], [4, 2, 3, 4, 6], [4, 2, 4, 2, 5], [4, 2, 5, 0, 4], [4, 2, 6, 5, 3], [4, 3, 0, 4, 2], [4, 3, 1, 2, 1], [4, 3, 2, 0, 0], [4, 3, 3, 5, 6], [4, 3, 4, 3, 5], [4, 3, 5, 1, 4], [4, 3, 6, 6, 3], [4, 4, 0, 5, 2], [4, 4, 1, 3, 1], [4, 4, 2, 1, 0], [4, 4, 3, 6, 6], [4, 4, 4, 4, 5], [4, 4, 5, 2, 4], [4, 4, 6, 0, 3], [4, 5, 0, 6, 2], [4, 5, 1, 4, 1], [4, 5, 2, 2, 0], [4, 5, 3, 0, 6], [4, 5, 4, 5, 5], [4, 5, 5, 3, 4], [4, 5, 6, 1, 3], [4, 6, 0, 0, 2], [4, 6, 1, 5, 1], [4, 6, 2, 3, 0], [4, 6, 3, 1, 6], [4, 6, 4, 6, 5], [4, 6, 5, 4, 4], [4, 6, 6, 2, 3], [5, 0, 0, 3, 6], [5, 0, 1, 1, 5], [5, 0, 2, 6, 4], [5, 0, 3, 4, 3], [5, 0, 4, 2, 2], [5, 0, 5, 0, 1], [5, 0, 6, 5, 0], [5, 1, 0, 4, 6], [5, 1, 1, 2, 5], [5, 1, 2, 0, 4], [5, 1, 3, 5, 3], [5, 1, 4, 3, 2], [5, 1, 5, 1, 1], [5, 1, 6, 6, 0], [5, 2, 0, 5, 6], [5, 2, 1, 3, 5], [5, 2, 2, 1, 4], [5, 2, 3, 6, 3], [5, 2, 4, 4, 2], [5, 2, 5, 2, 1], [5, 2, 6, 0, 0], [5, 3, 0, 6, 6], [5, 3, 1, 4, 5], [5, 3, 2, 2, 4], [5, 3, 3, 0, 3], [5, 3, 4, 5, 2], [5, 3, 5, 3, 1], [5, 3, 6, 1, 0], [5, 4, 0, 0, 6], [5, 4, 1, 5, 5], [5, 4, 2, 3, 4], [5, 4, 3, 1, 3], [5, 4, 4, 6, 2], [5, 4, 5, 4, 1], [5, 4, 6, 2, 0], [5, 5, 0, 1, 6], [5, 5, 1, 6, 5], [5, 5, 2, 4, 4], [5, 5, 3, 2, 3], [5, 5, 4, 0, 2], [5, 5, 5, 5, 1], [5, 5, 6, 3, 0], [5, 6, 0, 2, 6], [5, 6, 1, 0, 5], [5, 6, 2, 5, 4], [5, 6, 3, 3, 3], [5, 6, 4, 1, 2], [5, 6, 5, 6, 1], [5, 6, 6, 4, 0], [6, 0, 0, 5, 3], [6, 0, 1, 3, 2], [6, 0, 2, 1, 1], [6, 0, 3, 6, 0], [6, 0, 4, 4, 6], [6, 0, 5, 2, 5], [6, 0, 6, 0, 4], [6, 1, 0, 6, 3], [6, 1, 1, 4, 2], [6, 1, 2, 2, 1], [6, 1, 3, 0, 0], [6, 1, 4, 5, 6], [6, 1, 5, 3, 5], [6, 1, 6, 1, 4], [6, 2, 0, 0, 3], [6, 2, 1, 5, 2], [6, 2, 2, 3, 1], [6, 2, 3, 1, 0], [6, 2, 4, 6, 6], [6, 2, 5, 4, 5], [6, 2, 6, 2, 4], [6, 3, 0, 1, 3], [6, 3, 1, 6, 2], [6, 3, 2, 4, 1], [6, 3, 3, 2, 0], [6, 3, 4, 0, 6], [6, 3, 5, 5, 5], [6, 3, 6, 3, 4], [6, 4, 0, 2, 3], [6, 4, 1, 0, 2], [6, 4, 2, 5, 1], [6, 4, 3, 3, 0], [6, 4, 4, 1, 6], [6, 4, 5, 6, 5], [6, 4, 6, 4, 4], [6, 5, 0, 3, 3], [6, 5, 1, 1, 2], [6, 5, 2, 6, 1], [6, 5, 3, 4, 0], [6, 5, 4, 2, 6], [6, 5, 5, 0, 5], [6, 5, 6, 5, 4], [6, 6, 0, 4, 3], [6, 6, 1, 2, 2], [6, 6, 2, 0, 1], [6, 6, 3, 5, 0], [6, 6, 4, 3, 6], [6, 6, 5, 1, 5], [6, 6, 6, 6, 4]]
    v = [2, 1, 3, 6, 0]

    print(minimize_hamming_distance(B, C, v))

